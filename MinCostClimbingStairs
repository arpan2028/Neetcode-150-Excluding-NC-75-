#Tabulation Approach
class Solution(object):
    def minCostClimbingStairs(self, cost):
        """
        :type cost: List[int]
        :rtype: int
        """
        n = len(cost)
        dp = [0] * (n + 1)
        for i in range(2, n + 1):
            dp[i] = min(dp[i - 1] + cost[i - 1], dp[i - 2]+ cost[i - 2])
        return dp[n]


#Memoization Approach
class Solution(object):
    def minCostClimbingStairs(self, cost):
        memo = {}

        def dp(i):
            if i >= len(cost):
                return 0
            if i in memo:
                return memo[i]
            
            memo[i] = cost[i] + min(dp(i + 1), dp(i + 2))
            return memo[i]
        
        return min(dp(0), dp(1))
